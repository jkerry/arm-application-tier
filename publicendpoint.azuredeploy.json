{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "4.1.23.0",
  "parameters": {
    "applicationGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway name"
      }
    },
    "frontendCertificateName": {
      "type": "securestring",
      "metadata": {
        "description": "certificate name"
      }
    },
    "frontendCertificateData": {
      "type": "securestring",
      "metadata": {
        "description": "Base64 enoded certificate .pfx file"
      }
    },
    "frontendCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "pfx certificate password"
      }
    },
    "applicationGatewaySize": {
      "type": "string",
      "allowedValues": [
        "WAF_Medium",
        "WAF_Large"
      ],
      "defaultValue": "WAF_Medium",
      "metadata": {
        "description": "Application Gateway size"
      }
    },
    "capacity": {
      "type": "int",
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "defaultValue": 2,
      "metadata": {
        "description": "Number of instances"
      }
    },
    "wafMode": {
      "type": "string",
      "allowedValues": [
        "Detection",
        "Prevention"
      ],
      "defaultValue": "Prevention",
      "metadata": {
        "description": "WAF Mode"
      }
    },
    "disabledOWASPRuleGroups": {
      "type": "object",
      "defaultValue": {
        "rules": []
      },
      "metadata": {
        "description": "A list of disabled OWASP rule groups."
      }
    },
    "backendAddresses": {
      "type": "object",
      "defaultValue": {
        "addresses": [
          "127.0.0.1",
          "127.0.0.2"
        ]
      },
      "metadata": {
        "description": "A list of back-end servers to send traffic to. Can be a load balancer VIP."
      }
    },
    "network": {
      "type": "object",
      "defaultValue": {
        "vNet": {
          "resourceGroup": "Not_Provided",
          "name": "Not_Provided",
          "subnetName": "Not_Provided"
        },
        "publicIP": {
          "persistence": "Static"
        }
      }
    },
    "ports": {
      "type": "object",
      "defaultValue": {
        "https": {
          "frontEndPort": 443,
          "backEndPort": 443,
          "cookieAffinity": "Disabled"
        },
        "http": {
          "enabled": true,
          "frontEndPort": 80,
          "backEndPort": 80,
          "cookieAffinity": "Disabled"
        }
      }
    }
  },
  "variables": {
    "publicIPName": "[concat(parameters('applicationGatewayName'), '-PublicIP')]",
    "applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
    "vnetId": "[resourceId(parameters('network').vNet.resourceGroup, 'Microsoft.Network/virtualNetworks', parameters('network').vNet.name)]",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('network').vNet.subnetName)]",
    "httpsFrontEndPort": {
      "name": "[concat('FrontEndPort-HTTPS-', parameters('ports').https.frontEndPort)]",
      "properties": {
        "Port": "[parameters('ports').https.frontEndPort]"
      }
    },
    "httpFrontEndPort": {
      "name": "[concat('FrontEndPort-HTTP-', parameters('ports').http.frontEndPort)]",
      "properties": {
        "Port": "[parameters('ports').http.frontEndPort]"
      }
    },
    "frontendPorts": {
      "false": [
        "variables('httpsFrontEndPort')"
      ],
      "true": [
        "variables('httpsFrontEndPort')",
        "variables('httpFrontEndPort')"
      ]
    },
    "frontendPortConfig": "[variables('frontendPorts')[string(parameters('ports').http.enabled)]]",
    "httpsBackendPort": {
      "name":  "[concat('BackendPort-HTTPS-', parameters('ports').https.backEndPort)]",
      "properties": {
        "Port": "[parameters('ports').https.backEndPort]",
        "Protocol": "https",
        "CookieBasedAffinity": "[parameters('ports').https.cookieAffinity]"
      }
    },
    "httpBackendPort": {
      "name":  "[concat('BackendPort-HTTP-', parameters('ports').http.backEndPort)]",
      "properties": {
        "Port": "[parameters('ports').http.backEndPort]",
        "Protocol": "http",
        "CookieBasedAffinity": "[parameters('ports').http.cookieAffinity]"
      }
    },
    "backendPorts": {
      "false": [
        "variables('httpsBackEndPort')"
      ],
      "true": [
        "variables('httpsBackEndPort')",
        "variables('httpBackEndPort')"
      ]
    },
    "backendPortConfig": "[variables('backendPorts')[string(parameters('ports').http.enabled)]]",
    "httpsListener": {
      "name": "HttpsListener",
      "properties": {
        "FrontendIPConfiguration": {
          "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
        },
        "FrontendPort": {
          "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/FrontEndPort-HTTPS-', parameters('ports').https.frontEndPort)]"
        },
        "Protocol": "Https",
        "SslCertificate": {
          "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/', parameters('frontendCertificate').name)]"
        }
      }
    },
    "httpListener": {
      "name": "HttpListener",
      "properties": {
        "FrontendIPConfiguration": {
          "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
        },
        "FrontendPort": {
          "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/FrontEndPort-HTTP-', parameters('ports').http.frontEndPort)]"
        },
        "Protocol": "Http",
        "SslCertificate": null
      }
    },
    "httpListeners": {
      "false": [
        "variables('httpsListener')"
      ],
      "true": [
        "variables('httpsListener')",
        "variables('httpListener')"
      ]
    },
    "httpListenerConfig": "[variables('httpListeners')[string(parameters('ports').http.enabled)]]",
    "httpsRoutingRule": {
      "Name": "HTTPSRoute",
      "properties": {
        "RuleType": "Basic",
        "httpListener": {
          "id": "[concat(variables('applicationGatewayID'), '/httpListeners/HttpsListener')]"
        },
        "backendAddressPool": {
          "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/DefaultBackendAddressPool')]"
        },
        "backendHttpSettings": {
          "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/BackendPort-HTTPS-', parameters('ports').https.backEndPort)]"
        }
      }
    },
    "httpRoutingRule": {
      "Name": "HTTPRoute",
      "properties": {
        "RuleType": "Basic",
        "httpListener": {
          "id": "[concat(variables('applicationGatewayID'), '/httpListeners/HttpListener')]"
        },
        "backendAddressPool": {
          "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/DefaultBackendAddressPool')]"
        },
        "backendHttpSettings": {
          "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/BackendPort-HTTP-', parameters('ports').http.backEndPort)]"
        }
      }
    },
    "routingRules": {
      "false": [
        "variables('httpsRoutingRule')"
      ],
      "true": [
        "variables('httpsRoutingRule')",
        "variables('httpRoutingRule')"
      ]
    },
    "routingRule": "[variables('routingRules')[string(parameters('ports').http.enabled)]]"
  },
  "resources": [
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[parameters('network').publicIP.persistence]"
      }
    },
    {
      "apiVersion": "2017-06-01",
      "name": "[parameters('applicationGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName')]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('applicationGatewaySize')]",
          "tier": "WAF",
          "capacity": "[parameters('capacity')]"
        },
        "sslCertificates": [
          {
            "name": "[parameters('frontendCertificate').name]",
            "properties": {
              "data": "[parameters('frontendCertificateData')]",
              "password": "[parameters('frontendCertificatePassword')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "[concat(parameters('applicationGatewayName'), '-IP-CONF')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "authenticationCertificates": [
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName')]"
              }
            }
          }
        ],
        "frontendPorts": "[variables('frontendPortConfig')]",
        "backendAddressPools": [
          {
            "name": "DefaultBackendAddressPool",
            "properties": {
              "BackendAddresses": "[parameters('backendAddresses').addresses]"
            }
          }
        ],
        "backendHttpSettingsCollection": "[variables('backendPortConfig')]",
        "httpListeners": "[variables('httpListenerConfig')]",
        "requestRoutingRules": "[variables('routingRule')]",
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "[parameters('wafMode')]",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": "[parameters('disabledOWASPRuleGroups').rules]"
        }
      }
    }
  ],
  "outputs": {}
}